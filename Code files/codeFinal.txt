const textarea = document.querySelector("textarea"),
voiceList = document.querySelector("select"),
speechBtn = document.querySelector("button");

let synth = speechSynthesis,
isPaused = false;

function voices() {
for (let voice of synth.getVoices()) {
    let selected = voice.name === "Google US English" ? "selected" : "";
    let option = `<option value="${voice.name}" ${selected}>${voice.name} (${voice.lang})</option>`;
    voiceList.insertAdjacentHTML("beforeend", option);
}
}

synth.addEventListener("voiceschanged", voices);

function textToSpeech(text) {
let utterance = new SpeechSynthesisUtterance(text);
for (let voice of synth.getVoices()) {
    if (voice.name === voiceList.value) {
    utterance.voice = voice;
    }
}
utterance.onend = () => {
    speechBtn.innerText = 'Text to Speech';
};
synth.speak(utterance);
}

speechBtn.addEventListener("click", (e) => {
e.preventDefault();
if (textarea.value !== "") {
    if (!synth.speaking) {
    textToSpeech(textarea.value);
    speechBtn.innerText = "Pause Speech";
    } else {
    if (!isPaused) {
        synth.pause();
        isPaused = true;
        speechBtn.innerText = "Resume Speech";
    } else {
        synth.resume();
        isPaused = false;
        speechBtn.innerText = "Pause Speech";
    }
    }
}
});

voiceList.addEventListener("change", (e) => {
let selectedVoice = e.target.value;
for (let voice of synth.getVoices()) {
    if (voice.name === selectedVoice) {
    synth.cancel(); // stop speaking with the old voice
    if (isPaused) {
        speechBtn.innerText = "Pause Speech";
    }
    textToSpeech(textarea.value); // speak again with the new voice
    break;
    }
}
});













/* Import Google Font - Poppins */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');
*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}
body{
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: #1B1D2A;
}
::selection{
  color: #1B1D2A;
  background: #1B1D2A;
}
.wrapper{
  width: 370px;
  padding: 25px 30px;
  border-radius: 7px;
  background: #fff;
  box-shadow: 7px 7px 20px rgba(0,0,0,0.05);
}
.wrapper header{
  font-size: 28px;
  font-weight: 500;
  text-align: center;
  color: #FFB400;
}
.wrapper form{
  margin: 35px 0 20px;
}
form .row{
  display: flex;
  margin-bottom: 20px;
  flex-direction: column;
}
form .row label{
  font-size: 18px;
  margin-bottom: 5px;
  color: #FFB400;
}
form .row:nth-child(2) label{
  font-size: 17px;
}
form :where(textarea, select, button){
  outline: none;
  width: 100%;
  height: 100%;
  border: none;
  border-radius: 5px;
}
form .row textarea{
  resize: none;
  height: 110px;
  font-size: 15px;
  padding: 8px 10px;
  border: 1px solid #999;
}
form .row textarea::-webkit-scrollbar{
  width: 0px;
}
form .row .outer{
  height: 47px;
  display: flex;
  padding: 0 10px;
  align-items: center;
  border-radius: 5px;
  justify-content: center;
  border: 1px solid #999;
}
form .row select{
  font-size: 14px;
  background: none;
}
form .row select::-webkit-scrollbar{
  width: 8px;
}
form .row select::-webkit-scrollbar-track{
  background: #fff;
}
form .row select::-webkit-scrollbar-thumb{
  background: #888;
  border-radius: 8px;
  border-right: 2px solid #ffffff;
}
form button{
  height: 52px;
  color: #fff;
  font-size: 17px;
  cursor: pointer;
  margin-top: 10px;
  background: #FFB400;
  transition: 0.3s ease;
}
form button:hover{
  background: black;
  color: #FFB400;
}
  
@media(max-width: 400px){
  .wrapper{
    max-width: 345px;
    width: 100%;
  }
}




























// Find textarea, voicelist, and voiceBtn elements
const textarea = document.querySelector("textarea"),
  voiceList = document.querySelector("select"),
  voiceButton = document.querySelector("button");

// Set up the voice synthesis object and flag for pause/resume voice
let synth = speechSynthesis,
  isPaused = false;

// Dropdown for voice selection with available voices
function voices() {
  for (let voice of synth.getVoices()) {
    let selected = voice.name === "Google US English" ? "selected" : "";
    let option = `<option value="${voice.name}" ${selected}>${voice.name} (${voice.lang})</option>`;
    voiceList.insertAdjacentHTML("beforeend", option);
  }
}

// Call the voices function when voices change
synth.addEventListener("voiceschanged", voices);

// Convert text to voice
function textToVoice(text) {
  let utterance = new SpeechSynthesisUtterance(text);
  for (let voice of synth.getVoices()) {
    if (voice.name === voiceList.value) {
      utterance.voice = voice;
    }
  }
  // voiceButton text to Text to Voice when voice is finished
  utterance.onend = () => {
    voiceButton.innerText = "Text to Voice";
  };
  // Speak text with selected voice
  synth.speak(utterance);
}

// Call the textToVoice function when voiceButton is clicked
voiceButton.addEventListener("click", (e) => {
  e.preventDefault();
  // Only speak when textarea is not null
  if (textarea.value !== "") {
    // If voice is not in process, start speaking
    if (!synth.speaking) {
      textToVoice(textarea.value);
      voiceButton.innerText = "Pause";
      // If voice is in process, pause or resume
    } else {
      if (!isPaused) {
        synth.pause();
        isPaused = true;
        voiceButton.innerText = "Resume";
      } else {
        synth.resume();
        isPaused = false;
        voiceButton.innerText = "Pause";
      }
    }
  }
});

// Call texToVoice function again when different voice is selected
voiceList.addEventListener("change", (e) => {
  let selectedVoice = e.target.value;
  // Find selected voice and speak again with that voice
  for (let voice of synth.getVoices()) {
    if (voice.name === selectedVoice) {
      synth.cancel(); // stop speaking with the old voice
      if (isPaused) {
        voiceButton.innerText = "Pause";
      }
      textToVoice(textarea.value); // speak again with the new selected voice
      break;
    }
  }
});

















